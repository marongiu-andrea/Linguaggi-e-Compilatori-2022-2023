Fibonacci: {
  entry: |llvm
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    store i32 %0, ptr %3, align 4
    ; memorizza nel registro 4 il valore di n
    %4 = load i32, ptr %3, align 4
    ; salva nel registro 5 il risultato del confronto "n == 0"
    %5 = icmp eq i32 %4, 0
    br i1 %5, label %6, label %8
  |

  bb1: |llvm
    6:                                                ; preds = %1
    %7 = call i32 (ptr, ...) @printf(ptr noundef @.str)
    store i32 0, ptr %2, align 4
    br label %27
  |

  bb2: |llvm
    8:                                                ; preds = %1
    ; memorizza nel registro 9 il valore di n
    %9 = load i32, ptr %3, align 4
    ; salva nel registro 10 il risultato del confronto "n == 1"
    %10 = icmp eq i32 %9, 1
    br i1 %10, label %11, label %13
  |

  bb3: |llvm
    11:                                               ; preds = %8
    %12 = call i32 (ptr, ...) @printf(ptr noundef @.str.1)
    store i32 1, ptr %2, align 4
    br label %27
  |

  bb4: |llvm
    13:                                               ; preds = %8
    ; calcola i valori degli argomenti per la chiamata a printf
    %14 = load i32, ptr %3, align 4
    %15 = load i32, ptr %3, align 4
    %16 = sub nsw i32 %15, 1
    %17 = load i32, ptr %3, align 4
    %18 = sub nsw i32 %17, 2
    ; chiama la funzione printf
    %19 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %14, i32 noundef %16, i32 noundef %18)
    ; calcola i valori degli argomenti per le successive chiamate ricorsive
    %20 = load i32, ptr %3, align 4
    %21 = sub nsw i32 %20, 1
    %22 = call i32 @Fibonacci(i32 noundef %21)
    %23 = load i32, ptr %3, align 4
    %24 = sub nsw i32 %23, 2
    %25 = call i32 @Fibonacci(i32 noundef %24)
    %26 = add nsw i32 %22, %25
    store i32 %26, ptr %2, align 4
    br label %27
  |

  bb5: |llvm
    27:                                               ; preds = %13, %11, %6
    %28 = load i32, ptr %2, align 4
    ; restituisce il valore di ritorno al chiamante
    ret i32 %28
  |
  
  printf1: "@printf"
  printf2: "@printf"

  # Collegamenti
  entry -> bb1: true
  entry -> bb2: false
  bb1 -> bb5: true
  bb2 -> bb3: true
  bb2 -> bb4: false
  bb3 -> bb5: true
  bb4 -> bb5: true
  bb1 -> "@printf": call
  "@printf" -> bb1: return
  bb3 -> printf1: call
  printf1 -> bb3: return
  bb4 -> printf2: call
  printf2 -> bb4: return
  bb4 -> "@Fibonacci": call
  "@Fibonacci" -> bb4: return
}

printf {
  entry: |llvm
    %2 = alloca ptr, align 8
    %3 = alloca i32, align 4
    %4 = alloca [1 x %struct.__va_list_tag], align 16
    store ptr %0, ptr %2, align 8
    %5 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %4, i64 0, i64 0
    ; la funzione interna llvm.va_start viene creata da LLVM per gestire il caso di funzioni variadiche (come la printf).
    ; La funzione llvm.va_start inizializza un array con la lista di argomenti.
    call void @llvm.va_start(ptr %5)
    %6 = load ptr, ptr @stdout, align 8
    %7 = load ptr, ptr %2, align 8
    %8 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %4, i64 0, i64 0
    %9 = call i32 @vfprintf(ptr noundef %6, ptr noundef %7, ptr noundef %8)
    store i32 %9, ptr %3, align 4
    %10 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %4, i64 0, i64 0
    ; La funzione interna llvm.va_end distrugge l'array di argomenti precedentemente creato da llvm.va_start.
    call void @llvm.va_end(ptr %10)
    %11 = load i32, ptr %3, align 4
    ret i32 %11
  |
  
  entry -> "@llvm.va_start": call
  "@llvm.va_start" -> entry: return
  entry -> "@vfprintf": call
  "@vfprintf" -> entry: return
  entry -> "@llvm.va_end": call
  "@llvm.va_end" -> entry: return
}
