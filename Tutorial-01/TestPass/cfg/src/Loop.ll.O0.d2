g_incr {
  entry: |llvm
    %2 = alloca i32, align 4
    store i32 %0, ptr %2, align 4
    %3 = load i32, ptr %2, align 4
    %4 = load i32, ptr @g, align 4
    %5 = add nsw i32 %4, %3
    store i32 %5, ptr @g, align 4
    ; carica il valore della variabile globale g nel registro 6 e lo restituisce al chiamante
    %6 = load i32, ptr @g, align 4
    ret i32 %6
  |
}

loop {
  entry: |llvm
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    %6 = alloca i32, align 4
    %7 = alloca i32, align 4
    %8 = alloca i32, align 4
    store i32 %0, ptr %4, align 4
    store i32 %1, ptr %5, align 4
    store i32 %2, ptr %6, align 4
    ; inizializzazione di ret
    store i32 0, ptr %8, align 4
    %9 = load i32, ptr %4, align 4
    store i32 %9, ptr %7, align 4
    br label %10
  |

  bb1: |llvm
    ; questo BB contiene le istruzioni per la condizione del for
    10:                                               ; preds = %17, %3
    %11 = load i32, ptr %7, align 4
    %12 = load i32, ptr %5, align 4
    %13 = icmp slt i32 %11, %12
    br i1 %13, label %14, label %20
  |

  bb2: |llvm
    ; questo BB contiene le istruzioni del body del for
    14:                                               ; preds = %10
    %15 = load i32, ptr %6, align 4
    %16 = call i32 @g_incr(i32 noundef %15)
    br label %17
  |

  bb3: |llvm
    17:                                               ; preds = %14
    %18 = load i32, ptr %7, align 4
    %19 = add nsw i32 %18, 1
    store i32 %19, ptr %7, align 4
    ; esegue un salto incondizionato alla condizione del for
    br label %10, !llvm.loop !6
  |

  bb4: |llvm
    ; calcolo di "ret + g" e ritorno al chiamante
    20:                                               ; preds = %10
    %21 = load i32, ptr %8, align 4
    %22 = load i32, ptr @g, align 4
    %23 = add nsw i32 %21, %22
    ret i32 %23
  |

  # Collegamenti
  entry -> bb1: true
  bb1 -> bb2: true
  bb1 -> bb4: false
  bb2 -> bb3: true
  bb3 -> bb1: true
}