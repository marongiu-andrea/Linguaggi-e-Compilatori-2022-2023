Fibonacci: {
  entry: |llvm
    br label %2
  |

  bb1: |llvm
    2:                                                ; preds = %5, %1
    %3 = phi i32 [ 0, %1 ], [ %10, %5 ]
    %4 = phi i32 [ %0, %1 ], [ %7, %5 ]
    ; implementa una "jump table"
    ; di default porta al blocco per il calcolo del prossimo numero di fibonacci
    ; altrimenti porta al blocco finale se incontro le due condizioni finali (0 e 1)
    switch i32 %4, label %5 [
      i32 0, label %11
      i32 1, label %12
    ]
  |

  bb2: |llvm
    5:                                                ; preds = %2
    ; calcola "n - 1" e "n - 2" per la chiamata ricorsiva
    %6 = add nsw i32 %4, -1
    %7 = add nsw i32 %4, -2
    %8 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i32 %4, i32 %6, i32 %7)
    %9 = tail call i32 @Fibonacci(i32 %6)
    %10 = add nsw i32 %9, %3
    br label %2
  |

  bb3: |llvm
    11:                                               ; preds = %2
    br label %12
  |

  bb4: |llvm
    12:                                               ; preds = %2, %11
    %13 = phi i8* [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), %11 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), %2 ]
    %14 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) %13)
    %15 = add nsw i32 %4, %3
    ret i32 %15
  |
  
  # collegamenti
  entry -> bb1: true
  bb1 -> bb2: default
  bb2 -> bb1: true
  bb1 -> bb3: value '0'
  bb1 -> bb4: value '1'
  bb3 -> bb4: true
}

printf : {

  entry: |llvm
    %2 = alloca [1 x %struct.__va_list_tag], align 16
  %3 = bitcast [1 x %struct.__va_list_tag]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #4
  |
  bb1: |llvm
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %3)
  |
  bb2: |llvm
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !5
  %6 = call i32 @vfprintf(%struct._IO_FILE* noundef %5, i8* noundef %0, %struct.__va_list_tag* noundef nonnull %4)
  |
  bb3: |llvm
  call void @llvm.va_end(i8* nonnull %3)
  |
  bb4: |llvm
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #4
  |
  bb5: |llvm
  ret i32 %6
  |
  
  entry -> "@llvm.lifetime.start.p0i8": call
  "@llvm.lifetime.start.p0i8" -> bb1: return
  bb1 -> "@llvm.va_start": call
  "@llvm.va_start" -> bb2: return
  bb2 -> "@vfprintf": call
  "@vfprintf" -> bb3: return
  bb3 -> "@llvm.va_end": call
  "@llvm.va_end" -> bb4: return
  bb4 -> "@llvm.lifetime.end.p0i8": call
  "@llvm.lifetime.end.p0i8" -> bb5: return

}
